// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: link_country_view_counter.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findLinkCounterViewCounter = `-- name: FindLinkCounterViewCounter :one
SELECT
    id,
    link_id,
    country_code,
    total_views,
    unique_visitors,
    created_on
FROM link_country_view_counter
WHERE link_id = $1 AND country_code = $2
`

type FindLinkCounterViewCounterParams struct {
	LinkID      pgtype.UUID
	CountryCode string
}

func (q *Queries) FindLinkCounterViewCounter(ctx context.Context, arg FindLinkCounterViewCounterParams) (LinkCountryViewCounter, error) {
	row := q.db.QueryRow(ctx, findLinkCounterViewCounter, arg.LinkID, arg.CountryCode)
	var i LinkCountryViewCounter
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.CountryCode,
		&i.TotalViews,
		&i.UniqueVisitors,
		&i.CreatedOn,
	)
	return i, err
}

const removeLinkCounterViewCounterByLink = `-- name: RemoveLinkCounterViewCounterByLink :exec
DELETE FROM link_country_view_counter
WHERE link_id = $1
`

func (q *Queries) RemoveLinkCounterViewCounterByLink(ctx context.Context, linkID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, removeLinkCounterViewCounterByLink, linkID)
	return err
}

const saveLinkCounterViewCounter = `-- name: SaveLinkCounterViewCounter :exec
INSERT INTO link_country_view_counter (
    id,
    link_id,
    country_code,
    total_views,
    unique_visitors,
    created_on
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type SaveLinkCounterViewCounterParams struct {
	ID             pgtype.UUID
	LinkID         pgtype.UUID
	CountryCode    string
	TotalViews     pgtype.Int4
	UniqueVisitors pgtype.Int4
	CreatedOn      pgtype.Timestamptz
}

func (q *Queries) SaveLinkCounterViewCounter(ctx context.Context, arg SaveLinkCounterViewCounterParams) error {
	_, err := q.db.Exec(ctx, saveLinkCounterViewCounter,
		arg.ID,
		arg.LinkID,
		arg.CountryCode,
		arg.TotalViews,
		arg.UniqueVisitors,
		arg.CreatedOn,
	)
	return err
}

const updateLinkCounterViewCounter = `-- name: UpdateLinkCounterViewCounter :exec
UPDATE link_country_view_counter
SET
    total_views = $1,
    unique_visitors = $2
WHERE
    link_id = $3 AND country_code = $4
`

type UpdateLinkCounterViewCounterParams struct {
	TotalViews     pgtype.Int4
	UniqueVisitors pgtype.Int4
	LinkID         pgtype.UUID
	CountryCode    string
}

func (q *Queries) UpdateLinkCounterViewCounter(ctx context.Context, arg UpdateLinkCounterViewCounterParams) error {
	_, err := q.db.Exec(ctx, updateLinkCounterViewCounter,
		arg.TotalViews,
		arg.UniqueVisitors,
		arg.LinkID,
		arg.CountryCode,
	)
	return err
}
